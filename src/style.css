:root {
  /* lightdark */
  color-scheme: dark;

  --radius: 2px;

  --font-size: 13;
  --font-size-sm: 13;
  --line-height: 21;
  --computed-line-height: calc(var(--line-height) / var(--font-size));

  --space-unit: calc(7 / var(--font-size) * 1rem);
  --space-0-5: calc(var(--space-unit) * 0.5);
  --space-1: var(--space-unit);
  --space-1-5: calc(var(--space-unit) * 1.5);
  --space-2: calc(var(--space-unit) * 2);
  --space-3: calc(var(--space-unit) * 3);
  --space-4: calc(var(--space-unit) * 4);
  --space-5: calc(var(--space-unit) * 5);
  /* Responsive pad sizing */
  --pad-min: 109px;

  /* Figma colors â€” selected frame */
  --color-gray-100: #1a1a1a;
  --color-gray-200: #333333;
  --color-gray-300: #4d4d4d;
  --color-gray-400: #999999;
  --color-gray-500: #f2f2f2;

  /* Converted to OKLCH for perceptual uniformity; hex kept as comment fallback */
  --color-warning: oklch(80% 0.1 60);
  --color-valid: oklch(80% 0.1 140);
  --color-scale: oklch(80% 0.1 290);

  --color-layer-0: var(--color-gray-100);
  --color-layer-1: var(--color-gray-200);
  --color-layer-2: var(--color-gray-300);
  --color-layer-3: var(--color-gray-400);
  --color-text: var(--color-gray-500);
  --color-text-meta: var(--color-gray-400);
  --color-border: var(--color-gray-200);
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html {
  font-family: "InterVariable", sans-serif;
  font-size: calc(var(--font-size) / 16 * 100%);
  line-height: var(--computed-line-height);
  background-color: var(--color-layer-0);
  color: var(--color-text);
  /* font smoothing */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#app {
  min-height: 100dvh;
  display: grid;
  grid-template-rows: auto 1fr;
}

svg {
  display: block;
  height: auto;
}

h2,
h3 {
  font-size: 1rem;
  font-weight: 500;
}

label {
  font-weight: 500;
}

.label-text {
  display: inline-block;
  padding-right: var(--space-1);
  padding-bottom: var(--space-1);
}

select {
  display: block;
  width: 100%;
  /* background-color: var(--color-layer-1); */
  background-color: var(--color-layer-0);
  color: var(--color-text);
  border: 1px solid var(--color-border);
  border-radius: var(--radius);
  font: inherit;
  line-height: inherit;
  /* appearance: none; */
  /* padding: 0; */
  height: var(--space-4);
  padding: 0 var(--space-0-5);
}

button {
  /* reset button styles */
  display: inline-block;
  color: inherit;
  background: none;
  border: none;
  padding: 0;
  font: inherit;
  font-weight: 500;
  -webkit-tap-highlight-color: transparent; /* remove iOS/Android tap highlight */

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
}

.button {
  border-radius: var(--radius);
  padding: 0 var(--space-0-5);
  background-color: var(--color-layer-1);
  color: var(--color-text);
}

.button.icon {
  width: var(--space-3);
  aspect-ratio: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  padding: 0;
}

.button.block {
  display: block;
  width: 100%;
}

.button.warning {
  background-color: var(--color-warning);
  color: var(--color-layer-0);
}

.button.scale {
  background-color: var(--color-scale);
  color: var(--color-layer-0);
}

.button.large {
  padding: var(--space-0-5) var(--space-1);
}

.button.reversed {
  background-color: var(--color-text);
  color: var(--color-layer-0);
}

.button.valid {
  background-color: var(--color-valid);
  color: var(--color-layer-0);
}

dialog {
  color: inherit;
  background-color: var(--color-layer-0);
  width: 100%;
  max-width: 100%;
  max-height: 100%;
  margin: auto auto 0;
  border: 1px solid var(--color-border);
  border-radius: 0;
  opacity: 0;
  transform: translateY(calc(var(--space-2) * 1));
  transition: all 0.15s ease;
  transition-behavior: allow-discrete;

  &::backdrop {
    transition: inherit;
    opacity: 0;
    background: rgba(0, 0, 0, 0.5);
  }
}

dialog:open {
  opacity: 1;
  transform: translateY(0);

  &::backdrop {
    opacity: 1;
  }
}

@starting-style {
  dialog:open {
    opacity: 0;
    transform: translateY(calc(var(--space-2) * 1));

    &::backdrop {
      opacity: 0;
    }
  }
}

.dialog-body {
  display: grid;
  gap: var(--space-2);
  padding-bottom: var(--space-2);
}

.dialog-top {
  padding: var(--space-1) var(--space-1) var(--space-1) var(--space-2);
  display: flex;
  justify-content: space-between;
  align-items: center;
  /* border-bottom: 1px solid var(--color-border); */
}

.dialog-close {
  padding: var(--space-1);
}

.dialog-close-icon {
  width: var(--space-2);
  stroke-width: 2;
}

.dialog-content {
  padding: 0 var(--space-2);
}

.dialog-buttons {
  padding: 0 var(--space-2);
  display: flex;
  justify-content: flex-end;
  gap: var(--space-2);
}

.top {
  display: flex;
  align-items: center;
  gap: var(--space-2);
  justify-content: space-between;
  padding: var(--space-1);
}

.top-left {
  display: flex;
  align-items: center;
  gap: var(--space-1);
}

.midi-status-container {
  display: flex;
  align-items: center;
  gap: var(--space-1);
}

.midi-status-symbol {
  display: none;
}

.pads {
  --pad-min: 109px;
  padding: 1px;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(var(--pad-min), 1fr));
  gap: 1px;
}

.pad {
  display: flex;
  flex-direction: column;
  gap: var(--space-0-5);
  display: grid;
}

.pad-buttons {
  display: flex;
  gap: var(--space-1);
  justify-content: flex-end;
  grid-column: 1 / -1;
  grid-row: 1 / -1;
  align-self: end;
  justify-self: end;
  z-index: 1;
}

.pad-edit {
  color: var(--color-text-meta);
  text-box-trim: trim-both;
  padding: var(--space-1);
}

/* Prevent text selection and long-press selection on play buttons */
.pad-play {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-touch-callout: none; /* iOS Safari */
  touch-action: none; /* let pointer events control gestures */
  text-box-trim: trim-both;

  border: none;
  background-color: var(--color-layer-2);
  color: var(--color-text);
  border-radius: var(--radius);
  text-align: left;
  padding: var(--space-1);
  min-height: calc(var(--space-5) * 1.5);
  display: flex;
  align-items: start;
  grid-column: 1 / -1;
  grid-row: 1 / -1;
  color: var(--color-text);

  &:active {
    background-color: var(--color-text);
    color: var(--color-layer-1);
  }

  &:disabled,
  &.pad-unassigned {
    background-color: var(--color-layer-1);
    opacity: 1;
    color: var(--color-layer-1);
  }

  & span {
    text-box-trim: trim-both;
  }
}

/* Prevent long-press selection on Preview button as well */
.preview {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-touch-callout: none; /* iOS Safari */
  touch-action: none; /* let pointer events control gestures */
}

.keyboard {
  --key-w: calc(6 / var(--font-size) * 1rem); /* white key width */
  --key-h: calc(21 / var(--font-size) * 1rem); /* white key height */
  --black-w: calc(5 / var(--font-size) * 1rem); /* black key width */
  --black-h: calc(12 / var(--font-size) * 1rem); /* black key height */
  --gap: 1px; /* spacing between white keys */

  position: relative;
  display: inline-block;
  width: calc(var(--key-w) * 7 + var(--gap) * 6);
  height: var(--key-h);
  border-radius: var(--radius);
  overflow: hidden;
}

.key {
  position: absolute;
  top: 0;
  background: var(--color-layer-3);
}

.key-played {
  background: var(--color-text);
}

/* White keys (7 stripes) */
.key-white {
  width: var(--key-w);
  height: var(--key-h);
}

/* Black keys overlay */
.key-black {
  width: var(--black-w);
  height: var(--black-h);
  border: 1px solid var(--color-layer-0);
  background-color: var(--color-layer-0);
  border-top-width: 0; /* match figma: no top border */
}

/* Ensure played state overrides black key default background */
.key-black.key-played {
  background-color: var(--color-text);
}

/* Map C D E F G A B positions */
.keyboard .key-c {
  left: calc((var(--key-w) + var(--gap)) * 0);
}
.keyboard .key-d {
  left: calc((var(--key-w) + var(--gap)) * 1);
}
.keyboard .key-e {
  left: calc((var(--key-w) + var(--gap)) * 2);
}
.keyboard .key-f {
  left: calc((var(--key-w) + var(--gap)) * 3);
}
.keyboard .key-g {
  left: calc((var(--key-w) + var(--gap)) * 4);
}
.keyboard .key-a {
  left: calc((var(--key-w) + var(--gap)) * 5);
}
.keyboard .key-b {
  left: calc((var(--key-w) + var(--gap)) * 6);
}

/* Place black keys between the correct whites */
/* Center black keys in the gap between adjacent whites */
.keyboard .key-db {
  left: calc(
    (1 * var(--key-w) + 0 * var(--gap) + var(--gap) / 2) - var(--black-w) / 2
  );
}
.keyboard .key-eb {
  left: calc(
    (2 * var(--key-w) + 1 * var(--gap) + var(--gap) / 2) - var(--black-w) / 2
  );
}
/* no black key between E and F */
.keyboard .key-gb {
  left: calc(
    (4 * var(--key-w) + 3 * var(--gap) + var(--gap) / 2) - var(--black-w) / 2
  );
}
.keyboard .key-ab {
  left: calc(
    (5 * var(--key-w) + 4 * var(--gap) + var(--gap) / 2) - var(--black-w) / 2
  );
}
.keyboard .key-bb {
  left: calc(
    (6 * var(--key-w) + 5 * var(--gap) + var(--gap) / 2) - var(--black-w) / 2
  );
}

.edit-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(8rem, 1fr));
  gap: var(--space-2);
  align-items: center;
}

.grid-span-2 {
  grid-column: span 2;
}

.chord-preview {
  display: grid;
  gap: var(--space-1);
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}

.toggle-buttons {
  display: flex;
  gap: var(--space-1);
  margin-left: calc(var(--space-1) * -1);
}

.toggle-button {
  color: var(--color-text-meta);
  font-weight: 500;
  padding: var(--space-0-5) var(--space-1);
  border-radius: var(--radius);

  &:has(.toggle-button-input:checked) {
    color: var(--color-text);
    background-color: var(--color-layer-1);
  }
}

.global-scale-info {
  display: flex;
  align-items: center;
  gap: var(--space-0-5);
}

.custom-select {
  display: grid;
  align-items: center;

  & select {
    padding: 0 var(--space-1);
    appearance: none;
    grid-area: 1 / -1 / 1 / -1;
  }

  & svg {
    grid-area: 1 / -1 / 1 / -1;
    justify-self: end;
    margin-right: var(--space-1);
  }
}

.flex-grow-1 {
  flex-grow: 1;
}

.color-valid {
  color: var(--color-valid);
}

.color-scale {
  color: var(--color-scale);
}

.color-warning {
  color: var(--color-warning);
}
